#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Socket IO
 */

// var io = require('socket.io')(server);

// var room = 'global';

// io.on('connection', function (socket) {
//   socket.on('join', function (prop) {
//     if (prop && prop.room) {
//       room = prop.room;
//     }
//     socket.join(room);
//   });
//
//   socket.on('question-update', function (prop) {
//     console.log(io.sockets.manager.roomClients[socket.id]);
//     socket
//       .to(room)
//       .emit('question-update-by-id', {hash: prop.hash})
//   });
// });

/**
 * Cron JOB
 */

var cron = require('node-cron');
var {kue, queue} = require('../helpers/queue');

//Sunday 00:00
cron.schedule('0 0 * * 0', async function () {
  const User = require('../models/user/index');
  const Question = require('../models/question/index');
  const Answer = require('../models/answer/index');

  let dateNow = new Date();
  let dateStart = new Date(dateNow.getTime() - (7 * 24 * 60 * 60 * 1000));

  (await User.find({}, '').exec()).forEach(async (user) => {
    var query = {author: user._id, "created_at": {"$gte": dateStart, "$lt": dateNow}};

    var job = queue.create('report', {
      user: {
        fullname: user.first_name + ' ' + user.last_name,
        email: user.email,
      },
      question: await Question.count(query).exec(),
      answer: await Answer.count(query).exec(),
    }).save(function (err) {
      if (err) console.log(job.id, err);
    });
  });
});

//Monday 11:**
cron.schedule('* * * 11 1', function () {
  const sendEmail = require('../helpers/sendemail');
  queue.process('report', (job, done) => {
    sendEmail(job.data, done);
    done()
  });
});


kue.app.listen(4000, function () {
  console.log('Kue Listen on Port: 4000')
});
